name: deploy

on:
  push:
    branches:
      - main
      - feature/deploy_fargate #一時的な検証目的用途
env:
  AWS_REGION: ap-northeast-1
  IMAGE_TAG: ${{ github.sha }} #GitHub Workflow実行のトリガとなったCommitのSHAである「github.sha」を、イメージタグとして使用
  SYSTEM_NAME: example
  SERVICE_NAME: foobar

jobs:
  deploy:
    name: Deploy app to AWS Fargate
    runs-on: ubuntu-latest

    steps:
      # --- AWSクレデンシャル設定 ---
      - name: Configure aws credentials for prod
        # if: github.ref == 'refs/heads/main' #commitがpushされたbranchが「main」か否かを判定するif文
        uses: aws-actions/configure-aws-credentials@v2 #node.js 12の使用が非推奨であるため、v1からv2に変更
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.PROD_AWS_ASSUME_ROLE_ARN }}
          role-duration-seconds: 1800

      # --- 環境変数設定 ---
      - name: Set env vars for prod
        # if: github.ref == 'refs/heads/main' #commitがpushされたbranchが「main」か否かを判定するif文
        run: |
          echo "ENV_NAME=prod" >> $GITHUB_ENV #環境変数「GITJIB_ENV」に「prod」をセット (以降の全てのstepで有効)
      #    echo "VPC_CIDR=172.31.0.0/16" >> $GITHUB_ENV
      #
      # --- コードチェックアウト ---
      - uses: actions/checkout@v3 #最新のv2では非推奨が存在する事から、v3に変更)

      # --- node.js構築 (ローカル開発環境とバージョンをあわせるために追加)---
      - name: Set Node.js 19.8.1
        uses: actions/setup-node@v3
        with:
          node-version: 19.8.1

      # --- appコンテナ(PHP) および webコンテナ(Nginx) の起動 ---
      - run: docker-compose up -d --build app web

      # --- appコンテナ(PHP)向けcomposerのキャッシュ ---
      - name: Cache composer
        id: cache-composer
        uses: actions/cache@v3 #v2からv3に変更
        with:
          path: backend/vendor
          key: composer-v1-${{ hashFiles('backend/composer.lock') }}

      # --- appコンテナ(PHP)内におけるPHP関連パッケージのインストール ---
      - run: docker-compose exec -T app composer install -n --prefer-dist --no-dev
        if: ${{ !steps.cache-composer.outputs.cache-hit }}

      # --- webコンテナ(Nginx)向けnpmのキャッシュ ---
      - name: Cache npm
        id: cache-npm-ci
        uses: actions/cache@v3 #v2からv3に変更
        with:
          path: backend/node_modules
          key: npm-v1-${{ hashFiles('backend/package-lock.json') }}

      # --- webコンテナ(Nginx)内におけるnpmをバージョンアップ (後段での「npm run prod」実行時の「npm ERR! Your cache folder contains root-owned files, due to a bug in」エラー対策)---
      - run: docker-compose exec -T web npm install -g npm@9.6.2 # webコンテナ内で「npm install -g npm@9.6.2」コマンドを実行

      # --- webコンテナ(Nginx)内におけるnode.js関連パッケージのインストール ---
      - run: docker-compose exec -T web npm ci # webコンテナ内で「npm ci」コマンドを実行
        if: ${{ !steps.cache-npm-ci.outputs.cache-hit }}

      # --- webコンテナ(Nginx)内におけるLaravelビルド(Production)の実行 (webコンテナ(Nginx)内で「npm run prod」コマンドを実行) ---
      - run: docker-compose exec -T web npm run prod

      # --- ECRへのログイン ---
      - uses: aws-actions/amazon-ecr-login@v1.6.0 #v1からv1.6.0に変更
        id: amazon-ecr-login

      # --- webコンテナ(Nginx)イメージのコンテナBuild & ECRへのPush ---
      - name: Push nginx image to ecr
        env:
          DOCKER_BUILDKIT: 1 #BuildKitを用いたイメージビルドする事から、「1」を設定 (リファレンス書籍の開発ポリシーに依る)
          ECR_REGISTRY: ${{ steps.amazon-ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ env.SYSTEM_NAME }}-${{ env.ENV_NAME }}-${{ env.SERVICE_NAME }}-nginx
        run: |
          docker build \
            --cache-from=$ECR_REGISTRY/$ECR_REPOSITORY:latest --build-arg BUILDKIT_INLINE_CACHE=1 . \
            -f infra/docker/nginx/Dockerfile \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # --- appコンテナ(PHP)イメージのコンテナBuild & ECRへのPush ---
      - name: Push php image to ecr
        env:
          DOCKER_BUILDKIT: 1
          ECR_REGISTRY: ${{ steps.amazon-ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ env.SYSTEM_NAME }}-${{ env.ENV_NAME }}-${{ env.SERVICE_NAME }}-php #「env.ENV_NAME」は『name: Set env vars for prod』のstepでセットした値を使用
        run: |
          docker build \
            --cache-from=$ECR_REGISTRY/$ECR_REPOSITORY:latest --build-arg BUILDKIT_INLINE_CACHE=1 . \
            -f infra/docker/php/Dockerfile \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      #       - name: Upload env file
      #         run: aws s3 cp .env.$ENV_NAME s3://shonansurvivors-$SYSTEM_NAME-$ENV_NAME-$SERVICE_NAME-env-file/$IMAGE_TAG/.env
      #         working-directory: backend

      # --- GitHub Hosted Runnerへのecspressoのinstall ---
      - name: Download ecspresso
        uses: kayac/ecspresso@v0
        with:
          version: v1.5.3
      #
      #       - name: Register task definition
      #         run: ecspresso register --config config_$ENV_NAME.yaml
      #         working-directory: ./ecspresso

      #       - name: Migrate database
      #         run: |
      #           ecspresso run --config config_$ENV_NAME.yaml \
      #             --latest-task-definition \
      #             --watch-container=php \
      #             --overrides='{"containerOverrides":[{"name":"nginx", "command":["nginx", "-v"]},{"name":"php", "command":["php", "artisan", "migrate", "--force"]}]}'
      #         working-directory: ./ecspresso

      # --- ecspressoを用いたECS deploy ---
      - name: Deploy to ecs
        run: ecspresso deploy --config config_$ENV_NAME.yaml
        # run: ecspresso deploy --config config_$ENV_NAME.yaml --latest-task-definition
        working-directory: ./ecspresso
